def one_password(args, stdin=None):
	def get_value(item, key):
		for part in key.split("."):
			if part not in item:
				return None
			item = item[part]
		return item
	
	def pretty(data, root, nested):
		for item in data:
			print(get_value(item, root) or "?")
			for key in nested:
				value = get_value(item, key)
				if value is not None:
					print("\t{}:\t{}".format(key, value))

	def signin_if_necessary():
		import json, sys, os
		config_file = os.path.expanduser("~/.op/config")
		key = "latest_signin"
		try:
			with open(config_file, "rt") as config:
				op = json.load(config)
				subdomain = op[key]
		except:
			print("Could not open get {} from {}. Please do an explicit signin.".format(key, config_file), file=sys.stderr)
			return
		env_var = "OP_SESSION_" + subdomain
		if env_var not in ${...}:
			${env_var} = $(op signin @(subdomain) --output=raw).strip()
	
	if not args:
		op
		return
	
	arg0 = args[0]
	
	if arg0 not in {"signin", "help", "signout", "update"}:
		signin_if_necessary()
	
	post_process = {
		"vaults": lambda j: pretty(j, "name", ["uuid"]),
		"items": lambda j: pretty(j, "overview.title", ["uuid"])
	}
	if arg0 in post_process:
		value = $(op list @(args))
		try:
			import json
			j = json.loads(value)
			post_process[arg0](j)
		except:
			print(value)
	else:
		op @(args)

aliases["1pw"] = one_password

del one_password
