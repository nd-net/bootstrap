#!/usr/bin/env python3

import os, datetime

class ListDiff:
    
    def __init__(self, target):
        self.target = target
    
    def items(self):
        return sorted(self.target.items())

def diff(original, change):
    if isinstance(change, dict):
        if not isinstance(original, dict):
            return change
        result = {}
        for key in set(original.keys()) - set(change.keys()):
            result[key] = None
            
        for key, value in change.items():
            originalValue = original.get(key)
            if originalValue is None:
                result[key] = value
            elif originalValue != value:
                result[key] = diff(originalValue, value)
        return result
    elif isinstance(change, list):
        if not isinstance(original, list):
            original = []
        return ListDiff(diff(dict(enumerate(original)), dict(enumerate(change))))
    else:
        return change

def script(plist_buddy, plist, value, replace=False):
    def delete(path):
        yield 'delete "{}"'.format(path)
    def setnested(path, type, items, indict):
        if path and indict:
            yield 'add "{}" {}'.format(path, type)
        for key, value in items:
            yield from generate(value, "{}:{}".format(path, key), type == "dict")
    mapping = {
        bool: "bool",
        int: "integer",
        float: "real",
        str: "string",
        bytes: "data",
        datetime.datetime: "date"
    }
        
    def generate(value, path, indict=True):
        if value is None:
            yield from delete(path)
        elif isinstance(value, dict):
            yield from setnested(path, "dict", value.items(), indict)
        elif isinstance(value, ListDiff):
            yield from setnested(path, "array", value.items(), indict)
        elif isinstance(value, list):
            yield from setnested(path, "array", enumerate(value), indict)
        else:
            plistType = mapping[type(value)]
            doDelete = replace or not indict
            if doDelete:
                yield from delete(path)
            # add first, then set. This reduces the number of definite errors for non-existing keys from 1 to 0
            yield 'add "{}" {} {}'.format(path, plistType, value)
            if not doDelete:
                yield 'set "{}" {}'.format(path, value)
            
    return """#!{} "{}" -f\n
#*-* coding: utf-8 *-*
{}
""".format(plist_buddy, plist, "\n".join(generate(value, "")))

def compactuser(path):
    """
    Compacts the path to use a ~ for its user, if applicable. Otherwise, this returns the path feed into it.
    
    >>> expanded = expanduser('~/foo/bar')
    >>> compactuser(expanded)
    '~/foo/bar'
    >>> compactuser('~/foo/bar')
    '~/foo/bar'
    >>> compactuser('/foo/bar')
    '/foo/bar'
    """
    userPath = os.path.expanduser('~')
    otherPath = os.path.expanduser(path)
    
    prefix = os.path.commonprefix([userPath, otherPath])
    if prefix == userPath:
        return '~' + otherPath[len(prefix):]
    else:
        return otherPath

def parse_args():
    import argparse
    
    parser = argparse.ArgumentParser(description="diff two plist files and create a plist-buddy script")
    
    parser.add_argument("-b", "--plist-buddy", metavar="executable", default="/usr/bin/env plist-buddy", help="The location of the plist-buddy executable used in the shebang. Default is '%(default)s'.")
    parser.add_argument("-p", "--plist", metavar="file.plist", help="The plist file to use in the script. Default is the name of the target plist file passed in.")
    parser.add_argument("-r", "--relative-path", action="store_true", help="If true, then this tool will use the literal path for plist. Otherwise, the path will use the absolute path.")
    parser.add_argument("-l", "--literal-path", action="store_true", help="If true, then this tool will use the literal path for plist. Otherwise, the path will be shortened to be a user path.")
    parser.add_argument("-D", "--delete-existing-entries", action="store_true", help="If true, then this tool will delete existing entries and add new ones. Otherwise it will set existing entries and add new ones (that may fail).")
    parser.add_argument("-o", "--out", metavar="script", default="-", type=argparse.FileType("wt", encoding="utf-8"), help="The output file to use for the script generated. Default is stdout.")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-i", "--interactive", action="store_true", help="If true, then %(prog)s will start in interactive mode and will wait for a keypress to diff a file with itself.")
    group.add_argument("-0", "--diff-against-empty", action="store_true", help="If true, then original will be assumed to be an empty dict.")
    group.add_argument("original", nargs="?", help="The original plist file.")
    parser.add_argument("target", help="The target plist file")

    args = parser.parse_args()
    
    return args

def load_plist(filename):
    import plistlib, sys
    if filename == "-":
        return plistlib.load(sys.stdin)
    with open(filename, "rb") as file:
        return plistlib.load(file)

def main():
    args = parse_args()
    
    plist = args.plist if args.plist else args.target
    if not args.relative_path:
        plist = os.path.abspath(plist)
    if not args.literal_path:
        plist = compactuser(plist)
    
    if args.interactive:
        originalPlist = load_plist(args.target)
        try:
            input("Loaded {}, press enter to reload it for a diff ".format(plist))
        except EOFError:
            return
    elif args.diff_against_empty:
        originalPlist = {}
    else:
        originalPlist = load_plist(args.original)
    
    retry = True
    while retry:
        targetPlist = load_plist(args.target)
        d = diff(originalPlist, targetPlist)
        retry = False
        if args.interactive:
            try:
                retry = input("Diff is {}, press y to reload it for another diff ".format(d)).strip().lower() == "y"
            except EOFError:
                return
    
    args.out.write(script(args.plist_buddy, plist, d, args.delete_existing_entries))

if __name__ == "__main__":
    main()
    