#!/usr/bin/env python3
import re, sys

def psort(match):
    # property attributes in order.
    # tuple items replace: item[0] by item[1]
    # string items use the string
    order = (
        "readonly", "readwrite", # read/write-able
        "copy", "assign", "strong", "weak", "unsafe_unretained",      # memory management
        ("retain", "strong"),    # memory management aliases
        "atomic", "nonatomic",   # atomicity
        "nonnull", "nullable", "null_unspecified", "null_resettable", # nullability
    )
    prefix = match.group("prefix")
    suffix = match.group("suffix")
    attributes = [i.strip() for i in match.group("attributes").split(",")]
    result = []
    for element in order:
        if isinstance(element, tuple):
            source, target = element
        else:
            source = target = element
        if source in attributes:
            attributes.remove(source)
            if target:
                result.append(target)
    # sort the remaining attributes - this ensures that getter= is before setter=
    attributes.sort()
    # remove empty strings
    while attributes and not attributes[0]:
        del attributes[0]
    result.extend(attributes)
    content = ", ".join(result)
    return f"{prefix}{content}{suffix}"

print(re.sub(r"(?P<prefix>@property\s*\()(?P<attributes>[^\(]*)(?P<suffix>\))", psort, sys.stdin.read()))
